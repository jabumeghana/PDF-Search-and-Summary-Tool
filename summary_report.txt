PDF File | Page Number | Line with Keyword
----------------------------------------------------
DBMS(UT-5).pdf | Page 1 | as a transaction. Logical work can be inserting a new value in the current database,
DBMS(UT-5).pdf | Page 1 | deleting existing values, or updating the current values in the database.
DBMS(UT-5).pdf | Page 11 | If Ti reads the initial value of object A inS1,it must also read the initial value
DBMS(UT-5).pdf | Page 11 | If Ti reads a value of A written by Tj in S1, it must also read the value of A
DBMS(UT-5).pdf | Page 12 |  If transaction T2 read the value updated by Transaction T1 followed by
DBMS(UT-5).pdf | Page 23 | If a transaction want to read any value it can refers
DBMS(UT-5).pdf | Page 23 | If a transaction to write any particular value it can
DBMS(UT-5).pdf | Page 27 | In the Read Phase, the data values from the database can be
DBMS(UT-5).pdf | Page 30 | value pair, Column-oriented, Graph-based and Document-
DBMS(UT-5).pdf | Page 30 | Key-value Pair Based
DBMS(UT-5).pdf | Page 31 | 1.Key Value Pair Based
DBMS(UT-5).pdf | Page 31 | Data is stored in key/value pairs. It is designed in such a way to
DBMS(UT-5).pdf | Page 31 | Key-value pair storage databases store data as a hash table
DBMS(UT-5).pdf | Page 31 | where each key is unique, and the value can be a
DBMS(UT-5).pdf | Page 31 | For example, a key-value pair may contain a key like “Website”
DBMS(UT-5).pdf | Page 31 | associated with a value like “AMAZON”.
DBMS(UT-5).pdf | Page 31 | arrays, etc. Key value stores help the developer to store schema-
DBMS(UT-5).pdf | Page 31 | Redis, Dynamo, Riak are some NoSQL examples of key-value
DBMS(UT-5).pdf | Page 32 | Values of single column databases are stored contiguously.
DBMS(UT-5).pdf | Page 32 | value pair but the value part is stored as a document. The
DBMS(UT-5).pdf | Page 32 | document is stored in JSON or XML formats. The value is
DBMS(UT-5).pdf | Page 45 | as key-value, document, graph, or column-family stores. Examples
DBMSNOTES(UNIT-2).pdf | Page 3 | same value can’t appear more than once in the table. A table cannot have more
DBMSNOTES(UNIT-2).pdf | Page 3 |  Two rows can’t have the same primary key value
DBMSNOTES(UNIT-2).pdf | Page 3 |  It must for every row to have a primary key value.
DBMSNOTES(UNIT-2).pdf | Page 3 |  The value in a primary key column can never be modified or updated if any
DBMSNOTES(UNIT-2).pdf | Page 4 |  It must contain unique values
DBMSNOTES(UNIT-2).pdf | Page 4 |  Must not contain null values
DBMSNOTES(UNIT-2).pdf | Page 6 | surrogate key is a value generated right before the record is inserted into a table.
DBMSNOTES(UNIT-2).pdf | Page 24 | values for many of its entries in the reduced table.
DBMSNOTES(UNIT-2).pdf | Page 30 | single data value requires multiple rows of data to be updated.
DBMSNOTES(UNIT-2).pdf | Page 30 | 1NF A relation is in 1NF if it contains an atomic value.
DBMSNOTES(UNIT-2).pdf | Page 31 | normal form and has no multi-valued dependency.
DBMSNOTES(UNIT-2).pdf | Page 31 | A relation will be 1NF if it contains an atomic value.
DBMSNOTES(UNIT-2).pdf | Page 32 | It states that an attribute of a table cannot hold multiple values. It
DBMSNOTES(UNIT-2).pdf | Page 32 | must hold only single-valued attributes.
DBMSNOTES(UNIT-2).pdf | Page 32 | First normal form disallows the multi-valued attribute, composite
DBMSNOTES(UNIT-2).pdf | Page 32 | Example: Relation EMPLOYEE is not in 1NF because of multi-valued
DBMSNOTES(UNIT-2).pdf | Page 36 | Transitive dependencies are indirect relationships between values in
DBMSNOTES(UNIT-2).pdf | Page 42 | no multi-valued dependency.
DBMSNOTES(UNIT-2).pdf | Page 43 | For a dependency A → B, if for a single value of A, multiple values
DBMSNOTES(UNIT-2).pdf | Page 43 | of B exists, then the relation will be a multi-valued dependency.
DBMSNOTES(UNIT-2).pdf | Page 43 | So there is a Multi-valued dependency on STU_ID, which leads to
DBMS_UT-3_.pdf | Page 3 | such as the ability to specify constraints on the values that can
DBMS_UT-3_.pdf | Page 4 | command to insert a set of values into the table.
DBMS_UT-3_.pdf | Page 4 | insert into tablename values(attribute1 datatype);
DBMS_UT-3_.pdf | Page 4 | Ex-insert into tablename values (attributen datatype);
DBMS_UT-3_.pdf | Page 5 | retrieve all the column values for every record from a table.
DBMS_UT-3_.pdf | Page 6 | column values for every record from a table:
DBMS_UT-3_.pdf | Page 16 | on the data values.
DBMS_UT-3_.pdf | Page 16 | values.
DBMS_UT-3_.pdf | Page 16 | This operator is used for multiplying data values.
DBMS_UT-3_.pdf | Page 16 | which is used to compare one expression’s value to other
DBMS_UT-3_.pdf | Page 17 | true or false values to combine one or more true or false values.
DBMS_UT-3_.pdf | Page 18 | its value from false to true or from true to false.
DBMS_UT-3_.pdf | Page 18 | STATEMENT. It compares a value to every value
DBMS_UT-3_.pdf | Page 18 | ANY compares a value to each value in a list of
DBMS_UT-3_.pdf | Page 19 | The IN operator checks a value within a set of
DBMS_UT-3_.pdf | Page 19 | values separated by commas and retrieves the
DBMS_UT-3_.pdf | Page 20 | condition satisfies i.e value of the common field will be the same.
DBMS_UT-3_.pdf | Page 24 | result-set will contain NULL values.
DBMS_UT-3_.pdf | Page 30 | values or data for every field and those fields are termed as a
DBMS_UT-3_.pdf | Page 30 | NULL value.
DBMS_UT-3_.pdf | Page 30 | NULL values could be possible because at the time of data entry
DBMS_UT-3_.pdf | Page 30 | information is not available. So SQL supports a special value
DBMS_UT-3_.pdf | Page 30 | known as NULL which is used to represent the values of attributes
DBMS_UT-3_.pdf | Page 30 | value in the field in the absence of a user-defined value
DBMS_UT-3_.pdf | Page 31 | Importance of NULL Value
DBMS_UT-3_.pdf | Page 31 | It is important to understand that a NULL value differs from a
DBMS_UT-3_.pdf | Page 31 | zero value.
DBMS_UT-3_.pdf | Page 31 | A NULL value is used to represent a missing value, but it usually
DBMS_UT-3_.pdf | Page 31 | The value unknown (value exists but is not known)
DBMS_UT-3_.pdf | Page 31 | Value not available (exists but is purposely withheld)
DBMS_UT-3_.pdf | Page 31 | Principles of NULL values
DBMS_UT-3_.pdf | Page 31 | Setting a NULL value is appropriate when the actual value is
DBMS_UT-3_.pdf | Page 31 | unknown, or when a value is not meaningful.
DBMS_UT-3_.pdf | Page 31 | A NULL value is not equivalent to a value of ZERO if the data
DBMS_UT-3_.pdf | Page 31 | A NULL value can be inserted into columns of any data type.
DBMS_UT-3_.pdf | Page 31 | A NULL value will evaluate NULL in any expression.
DBMS_UT-3_.pdf | Page 31 | Suppose if any column has a NULL value, then
DBMS_UT-3_.pdf | Page 39 | 3. WHERE VALUE OPERATOR
DBMS_UT-3_.pdf | Page 40 | 1. SET column_name = new_value
DBMS_UT-3_.pdf | Page 40 | 2. WHERE VALUE OPERATOR
DBMS_UT-3_.pdf | Page 41 | 1. WHERE VALUE OPERATOR
DBMS_UT-3_.pdf | Page 46 | always return a value, and on the other hand a procedure may or
DBMS_UT-3_.pdf | Page 46 | may not return a value. Except this, all the other things of PL/SQL
DBMS_UT-3_.pdf | Page 46 | IN represents that value will be passed from outside and OUT
DBMS_UT-3_.pdf | Page 46 | represents that this parameter will be used to return a value
DBMS_UT-3_.pdf | Page 47 | the maximum of two values.
DBMS_UT-3_.pdf | Page 50 | of the parameters. IN represents the value that will be passed
DBMS_UT-3_.pdf | Page 50 | used to return a value outside of the procedure.
DBMS_UT-3_.pdf | Page 51 | This procedure computes the square of value of a passed value.
DBMS_UT-3_.pdf | Page 51 | a value and then return another result.
DBMS_UT-3_.pdf | Page 53 | %FOUND Its return value is TRUE if DML statements like
DBMS_UT-3_.pdf | Page 53 | %NOTFOUND Its return value is TRUE if DML statements like
DBMS_UT-3_.pdf | Page 60 | Trigger generates some derived column values automatically
DBMS_UT-3_.pdf | Page 61 | new and old values for various DML statements, like INSERT,
DBMS_UT-3_.pdf | Page 68 | a single value like a number or a string of characters. Scalar
DBMS_UT-3_.pdf | Page 68 | 3. Reference Types: This datatype is used to hold pointer values
DBMS_UT-3_.pdf | Page 69 | Its value is quoted in single quotes.
DBMS_UT-3_.pdf | Page 70 | Its value is quoted in single quotes.
DBMS_UT-3_.pdf | Page 70 | alphanumeric value in it. Unused spaces are wasted.
DBMS_UT-3_.pdf | Page 70 | Its value is quoted in single quotes.
DBMS_UT-3_.pdf | Page 71 | alphanumeric value. The unused memory space is released.
DBMS_UT-3_.pdf | Page 71 | The value for this datatype is written in single quotes.
DBMS_UT-3_.pdf | Page 71 | It stores value of that variable whose datatype is unknown
DBMS_UT-3_.pdf | Page 71 | Also, its value is generally being retrieved from an existing
DBMS_UT-3_.pdf | Page 71 | unknown and %TYPE is used to store its value.
DBMS_UT-3_.pdf | Page 72 | It stores logical values.
DBMS_UT-3_.pdf | Page 72 | 1. isAdmin BOOLEAN; where, isAdmin is a variable whose value
